webpackHotUpdate_N_E("pages/index",{

/***/ "./components/Template/Header/Header.tsx":
/*!***********************************************!*\
  !*** ./components/Template/Header/Header.tsx ***!
  \***********************************************/
/*! exports provided: Header */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Header\", function() { return Header; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Text */ \"./components/Text/index.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./styles */ \"./components/Template/Header/styles.ts\");\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Button */ \"./components/Button/index.ts\");\n/* harmony import */ var popcorntime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! popcorntime */ \"./node_modules/popcorntime/src/index.js\");\n/* harmony import */ var popcorntime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(popcorntime__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var imdb_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! imdb-api */ \"./node_modules/imdb-api/lib/imdb.js\");\n/* harmony import */ var imdb_api__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(imdb_api__WEBPACK_IMPORTED_MODULE_5__);\nvar _this = undefined,\n    _jsxFileName = \"/home/daianebarizon/Repositories/popcorn2/popcorn-time-site/components/Template/Header/Header.tsx\";\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;\n\n\n\n\n\n\nvar Header = function Header(props) {\n  var options = {\n    page: 1,\n    sortby: 'seeds',\n    genre: 'all',\n    q: '' // It is useful to do a search or you can leave it empty\n\n  };\n  var data = Object(popcorntime__WEBPACK_IMPORTED_MODULE_4__[\"movies\"])(options);\n  console.log('data', data);\n  Object(popcorntime__WEBPACK_IMPORTED_MODULE_4__[\"movies\"])(options).then(function (data) {\n    return console.log('api', data);\n  });\n  var apiImdb = imdb_api__WEBPACK_IMPORTED_MODULE_5___default.a.get({\n    name: 'The Toxic Avenger'\n  }, {\n    apiKey: 'foo',\n    timeout: 30000\n  }).then(console.log)[\"catch\"](console.log);\n  console.log('apiImdb', apiImdb);\n  return __jsx(_styles__WEBPACK_IMPORTED_MODULE_2__[\"HeaderWrapper\"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, __jsx(_Text__WEBPACK_IMPORTED_MODULE_1__[\"Text\"], {\n    as: \"h1\",\n    fontWeight: \"light\",\n    fontSize: \"45px\",\n    m: \"0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \"Watch Movies and TV Shows Instantly\"), __jsx(_Text__WEBPACK_IMPORTED_MODULE_1__[\"Text\"], {\n    as: \"h2\",\n    fontWeight: \"light\",\n    fontSize: \"30px\",\n    color: \"green\",\n    m: \"0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"Currently in Beta, but go ahead and try it!\"), __jsx(_Button__WEBPACK_IMPORTED_MODULE_3__[\"Button\"], {\n    mt: \"20px\",\n    onClick: function onClick() {\n      return alert('clique');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, __jsx(_Text__WEBPACK_IMPORTED_MODULE_1__[\"Text\"], {\n    color: \"white\",\n    fontSize: \"25px\",\n    fontWeight: \"medium\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, \"Download Popcorn Time 4.4\")), __jsx(_Text__WEBPACK_IMPORTED_MODULE_1__[\"Text\"], {\n    as: \"small\",\n    fontWeight: \"light\",\n    fontSize: \"13px\",\n    color: \"red\",\n    mt: \"13px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, \"For Windows 7 and above Other operating systems and platforms\"));\n};\n_c = Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9UZW1wbGF0ZS9IZWFkZXIvSGVhZGVyLnRzeD8zMzdmIl0sIm5hbWVzIjpbIkhlYWRlciIsInByb3BzIiwib3B0aW9ucyIsInBhZ2UiLCJzb3J0YnkiLCJnZW5yZSIsInEiLCJkYXRhIiwibW92aWVzIiwiY29uc29sZSIsImxvZyIsInRoZW4iLCJhcGlJbWRiIiwiaW1kYiIsImdldCIsIm5hbWUiLCJhcGlLZXkiLCJ0aW1lb3V0IiwiYWxlcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlPLElBQU1BLE1BQU0sR0FBSSxTQUFWQSxNQUFVLENBQUNDLEtBQUQsRUFBa0I7QUFDckMsTUFBTUMsT0FBTyxHQUFHO0FBQ1pDLFFBQUksRUFBRSxDQURNO0FBRVpDLFVBQU0sRUFBRSxPQUZJO0FBR1pDLFNBQUssRUFBRSxLQUhLO0FBSVpDLEtBQUMsRUFBRSxFQUpTLENBSU47O0FBSk0sR0FBaEI7QUFNQSxNQUFNQyxJQUFJLEdBQUlDLDBEQUFNLENBQUNOLE9BQUQsQ0FBcEI7QUFDQU8sU0FBTyxDQUFDQyxHQUFSLENBQVksTUFBWixFQUFvQkgsSUFBcEI7QUFFQUMsNERBQU0sQ0FBQ04sT0FBRCxDQUFOLENBQWdCUyxJQUFoQixDQUFxQixVQUFDSixJQUFEO0FBQUEsV0FBVUUsT0FBTyxDQUFDQyxHQUFSLENBQVksS0FBWixFQUFtQkgsSUFBbkIsQ0FBVjtBQUFBLEdBQXJCO0FBRUEsTUFBTUssT0FBTyxHQUFHQywrQ0FBSSxDQUFDQyxHQUFMLENBQVM7QUFBQ0MsUUFBSSxFQUFFO0FBQVAsR0FBVCxFQUFzQztBQUFDQyxVQUFNLEVBQUUsS0FBVDtBQUFnQkMsV0FBTyxFQUFFO0FBQXpCLEdBQXRDLEVBQXVFTixJQUF2RSxDQUE0RUYsT0FBTyxDQUFDQyxHQUFwRixXQUErRkQsT0FBTyxDQUFDQyxHQUF2RyxDQUFoQjtBQUVBRCxTQUFPLENBQUNDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCRSxPQUF2QjtBQUVBLFNBQ0ksTUFBQyxxREFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ksTUFBQywwQ0FBRDtBQUFNLE1BQUUsRUFBQyxJQUFUO0FBQWMsY0FBVSxFQUFDLE9BQXpCO0FBQWlDLFlBQVEsRUFBQyxNQUExQztBQUFpRCxLQUFDLEVBQUMsR0FBbkQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSwyQ0FESixFQUlJLE1BQUMsMENBQUQ7QUFDSSxNQUFFLEVBQUMsSUFEUDtBQUVJLGNBQVUsRUFBQyxPQUZmO0FBR0ksWUFBUSxFQUFDLE1BSGI7QUFJSSxTQUFLLEVBQUMsT0FKVjtBQUtJLEtBQUMsRUFBQyxHQUxOO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbURBSkosRUFhSSxNQUFDLDhDQUFEO0FBQVEsTUFBRSxFQUFDLE1BQVg7QUFBa0IsV0FBTyxFQUFFO0FBQUEsYUFBTU0sS0FBSyxDQUFDLFFBQUQsQ0FBWDtBQUFBLEtBQTNCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDSSxNQUFDLDBDQUFEO0FBQU0sU0FBSyxFQUFDLE9BQVo7QUFBb0IsWUFBUSxFQUFDLE1BQTdCO0FBQW9DLGNBQVUsRUFBQyxRQUEvQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlDQURKLENBYkosRUFrQkksTUFBQywwQ0FBRDtBQUNJLE1BQUUsRUFBQyxPQURQO0FBRUksY0FBVSxFQUFDLE9BRmY7QUFHSSxZQUFRLEVBQUMsTUFIYjtBQUlJLFNBQUssRUFBQyxLQUpWO0FBS0ksTUFBRSxFQUFDLE1BTFA7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxxRUFsQkosQ0FESjtBQThCSCxDQTlDTTtLQUFNbEIsTSIsImZpbGUiOiIuL2NvbXBvbmVudHMvVGVtcGxhdGUvSGVhZGVyL0hlYWRlci50c3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vVGV4dCc7XHJcbmltcG9ydCB7IEhlYWRlcldyYXBwZXIgfSBmcm9tICcuL3N0eWxlcyc7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uLy4uL0J1dHRvbic7XHJcbmltcG9ydCB7IG1vdmllcyB9IGZyb20gJ3BvcGNvcm50aW1lJztcclxuaW1wb3J0IGltZGIgZnJvbSAnaW1kYi1hcGknXHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge31cclxuXHJcbmV4cG9ydCBjb25zdCBIZWFkZXIgPSAgKHByb3BzOiBQcm9wcykgPT4ge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICBwYWdlOiAxLFxyXG4gICAgICAgIHNvcnRieTogJ3NlZWRzJyxcclxuICAgICAgICBnZW5yZTogJ2FsbCcsXHJcbiAgICAgICAgcTogJycgLy8gSXQgaXMgdXNlZnVsIHRvIGRvIGEgc2VhcmNoIG9yIHlvdSBjYW4gbGVhdmUgaXQgZW1wdHlcclxuICAgICAgfTtcclxuICAgIGNvbnN0IGRhdGEgPSAgbW92aWVzKG9wdGlvbnMpO1xyXG4gICAgY29uc29sZS5sb2coJ2RhdGEnLCBkYXRhKVxyXG5cclxuICAgIG1vdmllcyhvcHRpb25zKS50aGVuKChkYXRhKSA9PiBjb25zb2xlLmxvZygnYXBpJywgZGF0YSkpO1xyXG5cclxuICAgIGNvbnN0IGFwaUltZGIgPSBpbWRiLmdldCh7bmFtZTogJ1RoZSBUb3hpYyBBdmVuZ2VyJ30sIHthcGlLZXk6ICdmb28nLCB0aW1lb3V0OiAzMDAwMH0pLnRoZW4oY29uc29sZS5sb2cpLmNhdGNoKGNvbnNvbGUubG9nKTtcclxuIFxyXG4gICAgY29uc29sZS5sb2coJ2FwaUltZGInLCBhcGlJbWRiKVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEhlYWRlcldyYXBwZXI+XHJcbiAgICAgICAgICAgIDxUZXh0IGFzPSdoMScgZm9udFdlaWdodD0nbGlnaHQnIGZvbnRTaXplPSc0NXB4JyBtPScwJz5cclxuICAgICAgICAgICAgICAgIFdhdGNoIE1vdmllcyBhbmQgVFYgU2hvd3MgSW5zdGFudGx5XHJcbiAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgPFRleHRcclxuICAgICAgICAgICAgICAgIGFzPSdoMidcclxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ9J2xpZ2h0J1xyXG4gICAgICAgICAgICAgICAgZm9udFNpemU9JzMwcHgnXHJcbiAgICAgICAgICAgICAgICBjb2xvcj0nZ3JlZW4nXHJcbiAgICAgICAgICAgICAgICBtPScwJ1xyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICBDdXJyZW50bHkgaW4gQmV0YSwgYnV0IGdvIGFoZWFkIGFuZCB0cnkgaXQhXHJcbiAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgPEJ1dHRvbiBtdD0nMjBweCcgb25DbGljaz17KCkgPT4gYWxlcnQoJ2NsaXF1ZScpfT5cclxuICAgICAgICAgICAgICAgIDxUZXh0IGNvbG9yPSd3aGl0ZScgZm9udFNpemU9JzI1cHgnIGZvbnRXZWlnaHQ9J21lZGl1bSc+XHJcbiAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQgUG9wY29ybiBUaW1lIDQuNFxyXG4gICAgICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgPFRleHRcclxuICAgICAgICAgICAgICAgIGFzPSdzbWFsbCdcclxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ9J2xpZ2h0J1xyXG4gICAgICAgICAgICAgICAgZm9udFNpemU9JzEzcHgnXHJcbiAgICAgICAgICAgICAgICBjb2xvcj0ncmVkJ1xyXG4gICAgICAgICAgICAgICAgbXQ9JzEzcHgnXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIEZvciBXaW5kb3dzIDcgYW5kIGFib3ZlIE90aGVyIG9wZXJhdGluZyBzeXN0ZW1zIGFuZCBwbGF0Zm9ybXNcclxuICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgIDwvSGVhZGVyV3JhcHBlcj5cclxuICAgICk7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Template/Header/Header.tsx\n");

/***/ }),

/***/ "./node_modules/@ungap/url-search-params/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@ungap/url-search-params/esm/index.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*! (c) Andrea Giammarchi - ISC */\nvar self = {};\ntry {\n  (function (URLSearchParams, plus) {\n    if (\n      new URLSearchParams('q=%2B').get('q') !== plus ||\n      new URLSearchParams({q: plus}).get('q') !== plus ||\n      new URLSearchParams([['q', plus]]).get('q') !== plus ||\n      new URLSearchParams('q=\\n').toString() !== 'q=%0A' ||\n      new URLSearchParams({q: ' &'}).toString() !== 'q=+%26' ||\n      new URLSearchParams({q: '%zx'}).toString() !== 'q=%25zx'\n    )\n      throw URLSearchParams;\n    self.URLSearchParams = URLSearchParams;\n  }(URLSearchParams, '+'));\n} catch(URLSearchParams) {\n  (function (Object, String, isArray) {'use strict';\n    var create = Object.create;\n    var defineProperty = Object.defineProperty;\n    var find = /[!'\\(\\)~]|%20|%00/g;\n    var findPercentSign = /%(?![0-9a-fA-F]{2})/g;\n    var plus = /\\+/g;\n    var replace = {\n      '!': '%21',\n      \"'\": '%27',\n      '(': '%28',\n      ')': '%29',\n      '~': '%7E',\n      '%20': '+',\n      '%00': '\\x00'\n    };\n    var proto = {\n      append: function (key, value) {\n        appendTo(this._ungap, key, value);\n      },\n      delete: function (key) {\n        delete this._ungap[key];\n      },\n      get: function (key) {\n        return this.has(key) ? this._ungap[key][0] : null;\n      },\n      getAll: function (key) {\n        return this.has(key) ? this._ungap[key].slice(0) : [];\n      },\n      has: function (key) {\n        return key in this._ungap;\n      },\n      set: function (key, value) {\n        this._ungap[key] = [String(value)];\n      },\n      forEach: function (callback, thisArg) {\n        var self = this;\n        for (var key in self._ungap)\n          self._ungap[key].forEach(invoke, key);\n        function invoke(value) {\n          callback.call(thisArg, value, String(key), self);\n        }\n      },\n      toJSON: function () {\n        return {};\n      },\n      toString: function () {\n        var query = [];\n        for (var key in this._ungap) {\n          var encoded = encode(key);\n          for (var\n            i = 0,\n            value = this._ungap[key];\n            i < value.length; i++\n          ) {\n            query.push(encoded + '=' + encode(value[i]));\n          }\n        }\n        return query.join('&');\n      }\n    };\n    for (var key in proto)\n      defineProperty(URLSearchParams.prototype, key, {\n        configurable: true,\n        writable: true,\n        value: proto[key]\n      });\n    self.URLSearchParams = URLSearchParams;\n    function URLSearchParams(query) {\n      var dict = create(null);\n      defineProperty(this, '_ungap', {value: dict});\n      switch (true) {\n        case !query:\n          break;\n        case typeof query === 'string':\n          if (query.charAt(0) === '?') {\n            query = query.slice(1);\n          }\n          for (var\n            pairs = query.split('&'),\n            i = 0,\n            length = pairs.length; i < length; i++\n          ) {\n            var value = pairs[i];\n            var index = value.indexOf('=');\n            if (-1 < index) {\n              appendTo(\n                dict,\n                decode(value.slice(0, index)),\n                decode(value.slice(index + 1))\n              );\n            } else if (value.length){\n              appendTo(\n                dict,\n                decode(value),\n                ''\n              );\n            }\n          }\n          break;\n        case isArray(query):\n          for (var\n            i = 0,\n            length = query.length; i < length; i++\n          ) {\n            var value = query[i];\n            appendTo(dict, value[0], value[1]);\n          }\n          break;\n        case 'forEach' in query:\n          query.forEach(addEach, dict);\n          break;\n        default:\n          for (var key in query)\n            appendTo(dict, key, query[key]);\n      }\n    }\n\n    function addEach(value, key) {\n      appendTo(this, key, value);\n    }\n\n    function appendTo(dict, key, value) {\n      var res = isArray(value) ? value.join(',') : value;\n      if (key in dict)\n        dict[key].push(res);\n      else\n        dict[key] = [res];\n    }\n\n    function decode(str) {\n      return decodeURIComponent(str.replace(findPercentSign, '%25').replace(plus, ' '));\n    }\n\n    function encode(str) {\n      return encodeURIComponent(str).replace(find, replacer);\n    }\n\n    function replacer(match) {\n      return replace[match];\n    }\n\n  }(Object, String, Array.isArray));\n}\n\n(function (URLSearchParamsProto) {\n\n  var iterable = false;\n  try { iterable = !!Symbol.iterator; } catch (o_O) {}\n\n  /* istanbul ignore else */\n  if (!('forEach' in URLSearchParamsProto)) {\n    URLSearchParamsProto.forEach = function forEach(callback, thisArg) {\n      var self = this;\n      var names = Object.create(null);\n      this.toString()\n          .replace(/=[\\s\\S]*?(?:&|$)/g, '=')\n          .split('=')\n          .forEach(function (name) {\n            if (!name.length || name in names)\n              return;\n            (names[name] = self.getAll(name)).forEach(function(value) {\n              callback.call(thisArg, value, name, self);\n            });\n          });\n    };\n  }\n\n  /* istanbul ignore else */\n  if (!('keys' in URLSearchParamsProto)) {\n    URLSearchParamsProto.keys = function keys() {\n      return iterator(this, function(value, key) { this.push(key); });\n    };\n  }\n\n   /* istanbul ignore else */\n  if (!('values' in URLSearchParamsProto)) {\n    URLSearchParamsProto.values = function values() {\n      return iterator(this, function(value, key) { this.push(value); });\n    };\n  }\n\n  /* istanbul ignore else */\n  if (!('entries' in URLSearchParamsProto)) {\n    URLSearchParamsProto.entries = function entries() {\n      return iterator(this, function(value, key) { this.push([key, value]); });\n    };\n  }\n\n  /* istanbul ignore else */\n  if (iterable && !(Symbol.iterator in URLSearchParamsProto)) {\n    URLSearchParamsProto[Symbol.iterator] = URLSearchParamsProto.entries;\n  }\n\n  /* istanbul ignore else */\n  if (!('sort' in URLSearchParamsProto)) {\n    URLSearchParamsProto.sort = function sort() {\n      var\n        entries = this.entries(),\n        entry = entries.next(),\n        done = entry.done,\n        keys = [],\n        values = Object.create(null),\n        i, key, value\n      ;\n      while (!done) {\n        value = entry.value;\n        key = value[0];\n        keys.push(key);\n        if (!(key in values)) {\n          values[key] = [];\n        }\n        values[key].push(value[1]);\n        entry = entries.next();\n        done = entry.done;\n      }\n      // not the champion in efficiency\n      // but these two bits just do the job\n      keys.sort();\n      for (i = 0; i < keys.length; i++) {\n        this.delete(keys[i]);\n      }\n      for (i = 0; i < keys.length; i++) {\n        key = keys[i];\n        this.append(key, values[key].shift());\n      }\n    };\n  }\n\n  function iterator(self, callback) {\n    var items = [];\n    self.forEach(callback, items);\n    /* istanbul ignore next */\n    return iterable ?\n      items[Symbol.iterator]() :\n      {\n        next: function() {\n          var value = items.shift();\n          return {done: value === void 0, value: value};\n        }\n      };\n  }\n\n  /* istanbul ignore next */\n  (function (Object) {\n    var\n      dP = Object.defineProperty,\n      gOPD = Object.getOwnPropertyDescriptor,\n      createSearchParamsPollute = function (search) {\n        function append(name, value) {\n          URLSearchParamsProto.append.call(this, name, value);\n          name = this.toString();\n          search.set.call(this._usp, name ? ('?' + name) : '');\n        }\n        function del(name) {\n          URLSearchParamsProto.delete.call(this, name);\n          name = this.toString();\n          search.set.call(this._usp, name ? ('?' + name) : '');\n        }\n        function set(name, value) {\n          URLSearchParamsProto.set.call(this, name, value);\n          name = this.toString();\n          search.set.call(this._usp, name ? ('?' + name) : '');\n        }\n        return function (sp, value) {\n          sp.append = append;\n          sp.delete = del;\n          sp.set = set;\n          return dP(sp, '_usp', {\n            configurable: true,\n            writable: true,\n            value: value\n          });\n        };\n      },\n      createSearchParamsCreate = function (polluteSearchParams) {\n        return function (obj, sp) {\n          dP(\n            obj, '_searchParams', {\n              configurable: true,\n              writable: true,\n              value: polluteSearchParams(sp, obj)\n            }\n          );\n          return sp;\n        };\n      },\n      updateSearchParams = function (sp) {\n        var append = sp.append;\n        sp.append = URLSearchParamsProto.append;\n        URLSearchParams.call(sp, sp._usp.search.slice(1));\n        sp.append = append;\n      },\n      verifySearchParams = function (obj, Class) {\n        if (!(obj instanceof Class)) throw new TypeError(\n          \"'searchParams' accessed on an object that \" +\n          \"does not implement interface \" + Class.name\n        );\n      },\n      upgradeClass = function (Class) {\n        var\n          ClassProto = Class.prototype,\n          searchParams = gOPD(ClassProto, 'searchParams'),\n          href = gOPD(ClassProto, 'href'),\n          search = gOPD(ClassProto, 'search'),\n          createSearchParams\n        ;\n        if (!searchParams && search && search.set) {\n          createSearchParams = createSearchParamsCreate(\n            createSearchParamsPollute(search)\n          );\n          Object.defineProperties(\n            ClassProto,\n            {\n              href: {\n                get: function () {\n                  return href.get.call(this);\n                },\n                set: function (value) {\n                  var sp = this._searchParams;\n                  href.set.call(this, value);\n                  if (sp) updateSearchParams(sp);\n                }\n              },\n              search: {\n                get: function () {\n                  return search.get.call(this);\n                },\n                set: function (value) {\n                  var sp = this._searchParams;\n                  search.set.call(this, value);\n                  if (sp) updateSearchParams(sp);\n                }\n              },\n              searchParams: {\n                get: function () {\n                  verifySearchParams(this, Class);\n                  return this._searchParams || createSearchParams(\n                    this,\n                    new URLSearchParams(this.search.slice(1))\n                  );\n                },\n                set: function (sp) {\n                  verifySearchParams(this, Class);\n                  createSearchParams(this, sp);\n                }\n              }\n            }\n          );\n        }\n      }\n    ;\n    try {\n      upgradeClass(HTMLAnchorElement);\n      if (/^function|object$/.test(typeof URL) && URL.prototype)\n        upgradeClass(URL);\n    } catch (meh) {}\n  }(Object));\n\n}(self.URLSearchParams.prototype, Object));\n/* harmony default export */ __webpack_exports__[\"default\"] = (self.URLSearchParams);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ungap/url-search-params/esm/index.js\n");

/***/ }),

/***/ "./node_modules/imdb-api/lib/imdb.js":
/*!*******************************************!*\
  !*** ./node_modules/imdb-api/lib/imdb.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Client = exports.search = exports.get = exports.ImdbError = exports.SearchResults = exports.SearchResult = exports.Game = exports.TVShow = exports.Episode = exports.Movie = exports.Rating = void 0;\nvar ky_universal_1 = __importDefault(__webpack_require__(/*! ky-universal */ \"./node_modules/ky-universal/browser.js\"));\nvar url_search_params_1 = __importDefault(__webpack_require__(/*! @ungap/url-search-params */ \"./node_modules/@ungap/url-search-params/esm/index.js\"));\nvar interfaces_1 = __webpack_require__(/*! ./interfaces */ \"./node_modules/imdb-api/lib/interfaces.js\");\nvar omdbapi = new URL(\"https://www.omdbapi.com\");\nfunction isRequestType(reqtype) {\n    if (reqtype === \"movie\" ||\n        reqtype === \"series\" ||\n        reqtype === \"episode\" ||\n        reqtype === \"game\") {\n        return true;\n    }\n    return false;\n}\nfunction reqtoqueryobj(req, apikey, page) {\n    var r = new url_search_params_1.default({\n        apikey: apikey,\n        s: req.name,\n        page: String(page),\n        r: \"json\",\n    });\n    if (req.year !== undefined) {\n        r.append(\"y\", String(req.year));\n    }\n    if (req.reqtype !== undefined) {\n        r.append(\"type\", String(req.reqtype));\n    }\n    return r;\n}\nvar Rating = (function () {\n    function Rating(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n    return Rating;\n}());\nexports.Rating = Rating;\nvar Movie = (function () {\n    function Movie(obj) {\n        this.ratings = [];\n        this.title = obj.Title;\n        this.year = 0;\n        this._yearData = \"\";\n        if (obj.Year !== undefined) {\n            this._yearData = obj.Year;\n            if (!obj.Year.match(/\\d{4}[-–](?:\\d{4})?/)) {\n                var rawYear = parseInt(obj.Year, 10);\n                if (isNaN(rawYear)) {\n                    throw new TypeError(\"invalid year\");\n                }\n                this.year = rawYear;\n            }\n            else {\n                this.year = 0;\n            }\n        }\n        this.rated = obj.Rated;\n        var rawReleased = new Date(obj.Released);\n        if (isNaN(rawReleased.getTime())) {\n            this.released = undefined;\n        }\n        else {\n            this.released = rawReleased;\n        }\n        this.runtime = obj.Runtime;\n        this.genres = obj.Genre;\n        this.director = obj.Director;\n        this.writer = obj.Writer;\n        this.actors = obj.Actors;\n        this.plot = obj.Plot;\n        this.languages = obj.Language;\n        this.country = obj.Country;\n        this.awards = obj.Awards;\n        this.poster = obj.Poster;\n        this.metascore = obj.Metascore;\n        var rawRating = parseFloat(obj.imdbRating);\n        this.rating = isNaN(rawRating) ? 0 : rawRating;\n        this.votes = obj.imdbVotes;\n        this.imdbid = obj.imdbID;\n        this.type = \"episode\";\n        if (obj.Type !== undefined) {\n            if (!isRequestType(obj.Type)) {\n                throw new TypeError(obj.Type + \" is not a valid RequestType\");\n            }\n            this.type = obj.Type;\n        }\n        if (obj.Ratings !== undefined) {\n            for (var _i = 0, _a = obj.Ratings; _i < _a.length; _i++) {\n                var rating = _a[_i];\n                this.ratings.push(new Rating(rating.Source, rating.Value));\n            }\n        }\n        if (obj.DVD !== undefined) {\n            var rawDvd = new Date(obj.DVD);\n            if (isNaN(rawDvd.getTime())) {\n                this.dvd = undefined;\n            }\n            else {\n                this.dvd = rawDvd;\n            }\n        }\n        this.boxoffice = obj.BoxOffice;\n        this.production = obj.Production;\n        this.website = obj.Website;\n        this.name = this.title;\n        this.series = this.type === \"series\";\n        this.imdburl = \"https://www.imdb.com/title/\" + this.imdbid;\n    }\n    return Movie;\n}());\nexports.Movie = Movie;\nvar Episode = (function (_super) {\n    __extends(Episode, _super);\n    function Episode(obj, season) {\n        var _this = _super.call(this, obj) || this;\n        if (season !== undefined) {\n            _this.season = season;\n        }\n        else {\n            _this.season = parseInt(obj.Season, 10);\n            if (isNaN(_this.season)) {\n                throw new TypeError(\"invalid season\");\n            }\n        }\n        _this.seriesid = obj.seriesID;\n        if (\"Episode\" in obj) {\n            _this.episode = parseInt(obj.Episode, 10);\n            if (isNaN(_this.episode)) {\n                throw new TypeError(\"invalid episode\");\n            }\n        }\n        else {\n            _this.episode = 0;\n        }\n        return _this;\n    }\n    return Episode;\n}(Movie));\nexports.Episode = Episode;\nvar TVShow = (function (_super) {\n    __extends(TVShow, _super);\n    function TVShow(obj, opts) {\n        var _this = _super.call(this, obj) || this;\n        _this._episodes = [];\n        var years = _this._yearData.split(\"-\");\n        _this.start_year = parseInt(years[0], 10);\n        _this.end_year = parseInt(years[1], 10) ? parseInt(years[1], 10) : undefined;\n        _this.totalseasons = parseInt(obj.totalSeasons, 10);\n        _this.opts = opts;\n        if (opts.baseURL && typeof opts.baseURL === \"string\") {\n            opts.baseURL = new URL(opts.baseURL);\n            _this.baseURL = opts.baseURL;\n        }\n        else if (opts.baseURL && opts.baseURL instanceof URL) {\n            _this.baseURL = opts.baseURL;\n        }\n        else {\n            _this.baseURL = omdbapi;\n        }\n        return _this;\n    }\n    TVShow.prototype.episodes = function () {\n        var _this = this;\n        if (this._episodes.length !== 0) {\n            return Promise.resolve(this._episodes);\n        }\n        if (this.opts.apiKey === undefined) {\n            throw new ImdbError(\"Missing api key in opts\");\n        }\n        var funcs = [];\n        for (var i = 1; i <= this.totalseasons; i++) {\n            var qs_1 = new url_search_params_1.default({\n                Season: String(i),\n                apikey: this.opts.apiKey,\n                i: this.imdbid,\n                r: \"json\",\n            });\n            var reqopts = {\n                searchParams: qs_1,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                timeout: undefined,\n                prefixUrl: this.baseURL,\n            };\n            if (this.opts.timeout !== undefined) {\n                reqopts.timeout = this.opts.timeout;\n            }\n            funcs.push(ky_universal_1.default(\"\", reqopts).json());\n        }\n        var prom = Promise.all(funcs)\n            .then(function (result) {\n            if (interfaces_1.assertEpisodeSeasonResponse(result)) {\n                return Promise.resolve(result);\n            }\n            return Promise.reject(new TypeError(\"Invalid response from server\"));\n        })\n            .then(function (epData) {\n            var eps = [];\n            for (var _i = 0, epData_1 = epData; _i < epData_1.length; _i++) {\n                var datum = epData_1[_i];\n                if (interfaces_1.isError(datum)) {\n                    throw new ImdbError(datum.Error);\n                }\n                var season = parseInt(datum.Season, 10);\n                for (var _a = 0, _b = datum.Episodes; _a < _b.length; _a++) {\n                    var ep = _b[_a];\n                    eps.push(new Episode(ep, season));\n                }\n            }\n            _this._episodes = eps;\n            return Promise.resolve(eps);\n        });\n        return prom;\n    };\n    return TVShow;\n}(Movie));\nexports.TVShow = TVShow;\nvar Game = (function (_super) {\n    __extends(Game, _super);\n    function Game() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Game;\n}(Movie));\nexports.Game = Game;\nvar SearchResult = (function () {\n    function SearchResult(obj) {\n        this.title = obj.Title;\n        this.year = parseInt(obj.Year, 10);\n        this.imdbid = obj.imdbID;\n        if (!isRequestType(obj.Type)) {\n            throw new TypeError(obj.Type + \" is not a valid RequestType\");\n        }\n        this.type = obj.Type;\n        this.poster = obj.Poster;\n        this.name = this.title;\n    }\n    return SearchResult;\n}());\nexports.SearchResult = SearchResult;\nvar SearchResults = (function () {\n    function SearchResults(obj, page, opts, req) {\n        this.results = [];\n        this.page = page;\n        this.req = req;\n        this.opts = opts;\n        for (var _i = 0, _a = obj.Search; _i < _a.length; _i++) {\n            var result = _a[_i];\n            this.results.push(new SearchResult(result));\n        }\n        this.totalresults = parseInt(obj.totalResults, 10);\n    }\n    SearchResults.prototype.next = function () {\n        return search(this.req, this.opts, this.page + 1);\n    };\n    return SearchResults;\n}());\nexports.SearchResults = SearchResults;\nvar ImdbError = (function () {\n    function ImdbError(message) {\n        this.message = message;\n        this.name = \"imdb api error\";\n    }\n    return ImdbError;\n}());\nexports.ImdbError = ImdbError;\nfunction get(req, opts) {\n    try {\n        return new Client(opts).get(req);\n    }\n    catch (e) {\n        return Promise.reject(e);\n    }\n}\nexports.get = get;\nfunction search(req, opts, page) {\n    return new Client(opts).search(req, page);\n}\nexports.search = search;\nvar Client = (function () {\n    function Client(opts) {\n        if (!Object.prototype.hasOwnProperty.call(opts, \"apiKey\")) {\n            throw new ImdbError(\"Missing api key in opts\");\n        }\n        this.opts = opts;\n        if (opts.baseURL && typeof opts.baseURL === \"string\") {\n            opts.baseURL = new URL(opts.baseURL);\n            this.baseURL = opts.baseURL;\n        }\n        else if (opts.baseURL && opts.baseURL instanceof URL) {\n            this.baseURL = opts.baseURL;\n        }\n        else {\n            this.baseURL = omdbapi;\n        }\n    }\n    Client.prototype.get = function (req, opts) {\n        var mergedOpts = this.mergeOpts(opts);\n        if (mergedOpts.apiKey === undefined) {\n            throw new ImdbError(\"Missing api key in opts\");\n        }\n        var qs = new url_search_params_1.default({\n            apikey: mergedOpts.apiKey,\n            plot: req.short_plot ? \"short\" : \"full\",\n            r: \"json\",\n        });\n        if (req.year !== undefined) {\n            qs.append(\"y\", String(req.year));\n        }\n        if (req.name) {\n            qs.append(\"t\", req.name);\n        }\n        else if (req.id) {\n            qs.append(\"i\", req.id);\n        }\n        else {\n            return Promise.reject(new ImdbError(\"Missing one of req.id or req.name\"));\n        }\n        var reqopts = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            searchParams: qs,\n            timeout: undefined,\n            prefixUrl: this.baseURL,\n        };\n        if (\"timeout\" in mergedOpts) {\n            reqopts.timeout = mergedOpts.timeout;\n        }\n        var prom = ky_universal_1.default(\"\", reqopts)\n            .json()\n            .then(function (response) {\n            if (interfaces_1.assertGetResponse(response)) {\n                return Promise.resolve(response);\n            }\n            return Promise.reject(new TypeError(\"Invalid response from server\"));\n        })\n            .then(function (data) {\n            var ret;\n            if (interfaces_1.isError(data)) {\n                throw new ImdbError(data.Error + \": \" + (req.name ? req.name : req.id));\n            }\n            if (interfaces_1.isMovie(data)) {\n                ret = new Movie(data);\n            }\n            else if (interfaces_1.isGame(data)) {\n                ret = new Game(data);\n            }\n            else if (interfaces_1.isTvshow(data)) {\n                ret = new TVShow(data, mergedOpts);\n            }\n            else if (interfaces_1.isEpisode(data)) {\n                ret = new Episode(data);\n            }\n            else {\n                throw new ImdbError(\"type: '\" + data.Type + \"' is not valid\");\n            }\n            return Promise.resolve(ret);\n        });\n        return prom;\n    };\n    Client.prototype.search = function (req, page, opts) {\n        var mergedOpts = this.mergeOpts(opts);\n        if (page === undefined) {\n            page = 1;\n        }\n        if (mergedOpts.apiKey === undefined) {\n            throw new ImdbError(\"Missing api key in opts\");\n        }\n        var qs = reqtoqueryobj(req, mergedOpts.apiKey, page);\n        var reqopts = {\n            searchParams: qs,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            timeout: undefined,\n            prefixUrl: this.baseURL,\n        };\n        if (mergedOpts.timeout) {\n            reqopts.timeout = mergedOpts.timeout;\n        }\n        var prom = ky_universal_1.default(\"\", reqopts)\n            .json()\n            .then(function (response) {\n            if (interfaces_1.assertSearchResponse(response)) {\n                return Promise.resolve(response);\n            }\n            return Promise.reject(new TypeError(\"Invalid response from server\"));\n        })\n            .then(function (data) {\n            if (interfaces_1.isError(data)) {\n                throw new ImdbError(data.Error + \": \" + req.name);\n            }\n            if (page === undefined) {\n                page = 0;\n            }\n            return Promise.resolve(new SearchResults(data, page, mergedOpts, req));\n        });\n        return prom;\n    };\n    Client.prototype.mergeOpts = function (opts) {\n        if (opts !== undefined) {\n            return __assign(__assign({}, this.opts), opts);\n        }\n        return __assign({}, this.opts);\n    };\n    return Client;\n}());\nexports.Client = Client;\n//# sourceMappingURL=imdb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/imdb-api/lib/imdb.js\n");

/***/ }),

/***/ "./node_modules/imdb-api/lib/interfaces.js":
/*!*************************************************!*\
  !*** ./node_modules/imdb-api/lib/interfaces.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertSearchResponse = exports.assertGetResponse = exports.assertEpisodeSeasonResponse = exports.isGame = exports.isEpisode = exports.isMovie = exports.isTvshow = exports.isError = void 0;\nfunction isError(response) {\n    return response.Response === \"False\";\n}\nexports.isError = isError;\nfunction isTvshow(response) {\n    return response.Type === \"series\";\n}\nexports.isTvshow = isTvshow;\nfunction isMovie(response) {\n    return response.Type === \"movie\";\n}\nexports.isMovie = isMovie;\nfunction isEpisode(response) {\n    return response.Type === \"episode\";\n}\nexports.isEpisode = isEpisode;\nfunction isGame(response) {\n    return response.Type === \"game\";\n}\nexports.isGame = isGame;\nfunction assertEpisodeSeasonResponse(response) {\n    if (!Array.isArray(response)) {\n        return false;\n    }\n    for (var _i = 0, response_1 = response; _i < response_1.length; _i++) {\n        var res = response_1[_i];\n        if (typeof res !== \"object\") {\n            return false;\n        }\n        if (\"Response\" in res) {\n            if (res.Response === \"False\") {\n                return true;\n            }\n            if (\"Season\" in res && \"totalSeasons\" in res) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexports.assertEpisodeSeasonResponse = assertEpisodeSeasonResponse;\nfunction assertGetResponse(response) {\n    if (typeof response !== \"object\") {\n        return false;\n    }\n    var res = response;\n    if (res === null) {\n        return false;\n    }\n    if (\"Response\" in res) {\n        return true;\n    }\n    return false;\n}\nexports.assertGetResponse = assertGetResponse;\nfunction assertSearchResponse(response) {\n    if (typeof response !== \"object\") {\n        return false;\n    }\n    var res = response;\n    if (res === null) {\n        return false;\n    }\n    if (\"Response\" in res) {\n        if (res.Response === \"False\") {\n            return true;\n        }\n    }\n    if (\"Search\" in res) {\n        return true;\n    }\n    return false;\n}\nexports.assertSearchResponse = assertSearchResponse;\n//# sourceMappingURL=interfaces.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2ltZGItYXBpL2xpYi9pbnRlcmZhY2VzLmpzPzZkMGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyx3QkFBd0I7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9pbWRiLWFwaS9saWIvaW50ZXJmYWNlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hc3NlcnRTZWFyY2hSZXNwb25zZSA9IGV4cG9ydHMuYXNzZXJ0R2V0UmVzcG9uc2UgPSBleHBvcnRzLmFzc2VydEVwaXNvZGVTZWFzb25SZXNwb25zZSA9IGV4cG9ydHMuaXNHYW1lID0gZXhwb3J0cy5pc0VwaXNvZGUgPSBleHBvcnRzLmlzTW92aWUgPSBleHBvcnRzLmlzVHZzaG93ID0gZXhwb3J0cy5pc0Vycm9yID0gdm9pZCAwO1xuZnVuY3Rpb24gaXNFcnJvcihyZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZS5SZXNwb25zZSA9PT0gXCJGYWxzZVwiO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcbmZ1bmN0aW9uIGlzVHZzaG93KHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLlR5cGUgPT09IFwic2VyaWVzXCI7XG59XG5leHBvcnRzLmlzVHZzaG93ID0gaXNUdnNob3c7XG5mdW5jdGlvbiBpc01vdmllKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLlR5cGUgPT09IFwibW92aWVcIjtcbn1cbmV4cG9ydHMuaXNNb3ZpZSA9IGlzTW92aWU7XG5mdW5jdGlvbiBpc0VwaXNvZGUocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gcmVzcG9uc2UuVHlwZSA9PT0gXCJlcGlzb2RlXCI7XG59XG5leHBvcnRzLmlzRXBpc29kZSA9IGlzRXBpc29kZTtcbmZ1bmN0aW9uIGlzR2FtZShyZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZS5UeXBlID09PSBcImdhbWVcIjtcbn1cbmV4cG9ydHMuaXNHYW1lID0gaXNHYW1lO1xuZnVuY3Rpb24gYXNzZXJ0RXBpc29kZVNlYXNvblJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3BvbnNlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIF9pID0gMCwgcmVzcG9uc2VfMSA9IHJlc3BvbnNlOyBfaSA8IHJlc3BvbnNlXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciByZXMgPSByZXNwb25zZV8xW19pXTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXMgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJSZXNwb25zZVwiIGluIHJlcykge1xuICAgICAgICAgICAgaWYgKHJlcy5SZXNwb25zZSA9PT0gXCJGYWxzZVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXCJTZWFzb25cIiBpbiByZXMgJiYgXCJ0b3RhbFNlYXNvbnNcIiBpbiByZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmFzc2VydEVwaXNvZGVTZWFzb25SZXNwb25zZSA9IGFzc2VydEVwaXNvZGVTZWFzb25SZXNwb25zZTtcbmZ1bmN0aW9uIGFzc2VydEdldFJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgaWYgKHR5cGVvZiByZXNwb25zZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciByZXMgPSByZXNwb25zZTtcbiAgICBpZiAocmVzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKFwiUmVzcG9uc2VcIiBpbiByZXMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuYXNzZXJ0R2V0UmVzcG9uc2UgPSBhc3NlcnRHZXRSZXNwb25zZTtcbmZ1bmN0aW9uIGFzc2VydFNlYXJjaFJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgaWYgKHR5cGVvZiByZXNwb25zZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciByZXMgPSByZXNwb25zZTtcbiAgICBpZiAocmVzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKFwiUmVzcG9uc2VcIiBpbiByZXMpIHtcbiAgICAgICAgaWYgKHJlcy5SZXNwb25zZSA9PT0gXCJGYWxzZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoXCJTZWFyY2hcIiBpbiByZXMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuYXNzZXJ0U2VhcmNoUmVzcG9uc2UgPSBhc3NlcnRTZWFyY2hSZXNwb25zZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZXMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/imdb-api/lib/interfaces.js\n");

/***/ }),

/***/ "./node_modules/ky-universal/browser.js":
/*!**********************************************!*\
  !*** ./node_modules/ky-universal/browser.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ky__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ky */ \"./node_modules/ky/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ky__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2t5LXVuaXZlcnNhbC9icm93c2VyLmpzP2RmZmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBMkIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMva3ktdW5pdmVyc2FsL2Jyb3dzZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge2RlZmF1bHR9IGZyb20gJ2t5JztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ky-universal/browser.js\n");

/***/ }),

/***/ "./node_modules/ky/index.js":
/*!**********************************!*\
  !*** ./node_modules/ky/index.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*! MIT License © Sindre Sorhus */\n\nconst globals = {};\n\nconst getGlobal = property => {\n\t/* istanbul ignore next */\n\tif (typeof self !== 'undefined' && self && property in self) {\n\t\treturn self;\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof window !== 'undefined' && window && property in window) {\n\t\treturn window;\n\t}\n\n\tif (typeof global !== 'undefined' && global && property in global) {\n\t\treturn global;\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof globalThis !== 'undefined' && globalThis) {\n\t\treturn globalThis;\n\t}\n};\n\nconst globalProperties = [\n\t'Headers',\n\t'Request',\n\t'Response',\n\t'ReadableStream',\n\t'fetch',\n\t'AbortController',\n\t'FormData'\n];\n\nfor (const property of globalProperties) {\n\tObject.defineProperty(globals, property, {\n\t\tget() {\n\t\t\tconst globalObject = getGlobal(property);\n\t\t\tconst value = globalObject && globalObject[property];\n\t\t\treturn typeof value === 'function' ? value.bind(globalObject) : value;\n\t\t}\n\t});\n}\n\nconst isObject = value => value !== null && typeof value === 'object';\nconst supportsAbortController = typeof globals.AbortController === 'function';\nconst supportsStreams = typeof globals.ReadableStream === 'function';\nconst supportsFormData = typeof globals.FormData === 'function';\n\nconst mergeHeaders = (source1, source2) => {\n\tconst result = new globals.Headers(source1 || {});\n\tconst isHeadersInstance = source2 instanceof globals.Headers;\n\tconst source = new globals.Headers(source2 || {});\n\n\tfor (const [key, value] of source) {\n\t\tif ((isHeadersInstance && value === 'undefined') || value === undefined) {\n\t\t\tresult.delete(key);\n\t\t} else {\n\t\t\tresult.set(key, value);\n\t\t}\n\t}\n\n\treturn result;\n};\n\nconst deepMerge = (...sources) => {\n\tlet returnValue = {};\n\tlet headers = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!(Array.isArray(returnValue))) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && Reflect.has(returnValue, key)) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\n\t\t\tif (isObject(source.headers)) {\n\t\t\t\theaders = mergeHeaders(headers, source.headers);\n\t\t\t}\n\t\t}\n\n\t\treturnValue.headers = headers;\n\t}\n\n\treturn returnValue;\n};\n\nconst requestMethods = [\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'head',\n\t'delete'\n];\n\nconst responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*'\n};\n\nconst retryMethods = [\n\t'get',\n\t'put',\n\t'head',\n\t'delete',\n\t'options',\n\t'trace'\n];\n\nconst retryStatusCodes = [\n\t408,\n\t413,\n\t429,\n\t500,\n\t502,\n\t503,\n\t504\n];\n\nconst retryAfterStatusCodes = [\n\t413,\n\t429,\n\t503\n];\n\nconst stop = Symbol('stop');\n\nclass HTTPError extends Error {\n\tconstructor(response) {\n\t\t// Set the message to the status text, such as Unauthorized,\n\t\t// with some fallbacks. This message should never be undefined.\n\t\tsuper(\n\t\t\tresponse.statusText ||\n\t\t\tString(\n\t\t\t\t(response.status === 0 || response.status) ?\n\t\t\t\t\tresponse.status : 'Unknown response error'\n\t\t\t)\n\t\t);\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t}\n}\n\nclass TimeoutError extends Error {\n\tconstructor(request) {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t\tthis.request = request;\n\t}\n}\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// `Promise.race()` workaround (#91)\nconst timeout = (request, abortController, options) =>\n\tnew Promise((resolve, reject) => {\n\t\tconst timeoutID = setTimeout(() => {\n\t\t\tif (abortController) {\n\t\t\t\tabortController.abort();\n\t\t\t}\n\n\t\t\treject(new TimeoutError(request));\n\t\t}, options.timeout);\n\n\t\t/* eslint-disable promise/prefer-await-to-then */\n\t\toptions.fetch(request)\n\t\t\t.then(resolve)\n\t\t\t.catch(reject)\n\t\t\t.then(() => {\n\t\t\t\tclearTimeout(timeoutID);\n\t\t\t});\n\t\t/* eslint-enable promise/prefer-await-to-then */\n\t});\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nconst defaultRetryOptions = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes\n};\n\nconst normalizeRetryOptions = (retry = {}) => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tafterStatusCodes: retryAfterStatusCodes\n\t};\n};\n\n// The maximum value of a 32bit int (see issue #117)\nconst maxSafeTimeout = 2147483647;\n\nclass Ky {\n\tconstructor(input, options = {}) {\n\t\tthis._retryCount = 0;\n\t\tthis._input = input;\n\t\tthis._options = {\n\t\t\t// TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tcredentials: this._input.credentials || 'same-origin',\n\t\t\t...options,\n\t\t\theaders: mergeHeaders(this._input.headers, options.headers),\n\t\t\thooks: deepMerge({\n\t\t\t\tbeforeRequest: [],\n\t\t\t\tbeforeRetry: [],\n\t\t\t\tafterResponse: []\n\t\t\t}, options.hooks),\n\t\t\tmethod: normalizeRequestMethod(options.method || this._input.method),\n\t\t\tprefixUrl: String(options.prefixUrl || ''),\n\t\t\tretry: normalizeRetryOptions(options.retry),\n\t\t\tthrowHttpErrors: options.throwHttpErrors !== false,\n\t\t\ttimeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n\t\t\tfetch: options.fetch || globals.fetch\n\t\t};\n\n\t\tif (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globals.Request)) {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t}\n\n\t\tif (this._options.prefixUrl && typeof this._input === 'string') {\n\t\t\tif (this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (!this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globals.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController.abort();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tthis.request = new globals.Request(this._input, this._options);\n\n\t\tif (this._options.searchParams) {\n\t\t\tconst searchParams = '?' + new URLSearchParams(this._options.searchParams).toString();\n\t\t\tconst url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n\n\t\t\t// To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\t\t\tif (((supportsFormData && this._options.body instanceof globals.FormData) || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n\t\t\t\tthis.request.headers.delete('content-type');\n\t\t\t}\n\n\t\t\tthis.request = new globals.Request(new globals.Request(url, this.request), this._options);\n\t\t}\n\n\t\tif (this._options.json !== undefined) {\n\t\t\tthis._options.body = JSON.stringify(this._options.json);\n\t\t\tthis.request.headers.set('content-type', 'application/json');\n\t\t\tthis.request = new globals.Request(this.request, {body: this._options.body});\n\t\t}\n\n\t\tconst fn = async () => {\n\t\t\tif (this._options.timeout > maxSafeTimeout) {\n\t\t\t\tthrow new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n\t\t\t}\n\n\t\t\tawait delay(1);\n\t\t\tlet response = await this._fetch();\n\n\t\t\tfor (const hook of this._options.hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tthis.request,\n\t\t\t\t\tthis._options,\n\t\t\t\t\tthis._decorateResponse(response.clone())\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globals.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._decorateResponse(response);\n\n\t\t\tif (!response.ok && this._options.throwHttpErrors) {\n\t\t\t\tthrow new HTTPError(response);\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this._options.onDownloadProgress) {\n\t\t\t\tif (typeof this._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn this._stream(response.clone(), this._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = this._options.retry.methods.includes(this.request.method.toLowerCase());\n\t\tconst result = isRetriableMethod ? this._retry(fn) : fn();\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes)) {\n\t\t\tresult[type] = async () => {\n\t\t\t\tthis.request.headers.set('accept', this.request.headers.get('accept') || mimeType);\n\n\t\t\t\tconst response = (await result).clone();\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tif (response.status === 204) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.parseJson) {\n\t\t\t\t\t\treturn options.parseJson(await response.text());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn response[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_calculateRetryDelay(error) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t_decorateResponse(response) {\n\t\tif (this._options.parseJson) {\n\t\t\tresponse.json = async () => {\n\t\t\t\treturn this._options.parseJson(await response.text());\n\t\t\t};\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tasync _retry(fn) {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t} catch (error) {\n\t\t\tconst ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms);\n\n\t\t\t\tfor (const hook of this._options.hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst hookResult = await hook({\n\t\t\t\t\t\trequest: this.request,\n\t\t\t\t\t\toptions: this._options,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tretryCount: this._retryCount\n\t\t\t\t\t});\n\n\t\t\t\t\t// If `stop` is returned from the hook, the retry process is stopped\n\t\t\t\t\tif (hookResult === stop) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tif (this._options.throwHttpErrors) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync _fetch() {\n\t\tfor (const hook of this._options.hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this.request, this._options);\n\n\t\t\tif (result instanceof Request) {\n\t\t\t\tthis.request = result;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.timeout === false) {\n\t\t\treturn this._options.fetch(this.request.clone());\n\t\t}\n\n\t\treturn timeout(this.request.clone(), this.abortController, this._options);\n\t}\n\n\t/* istanbul ignore next */\n\t_stream(response, onDownloadProgress) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\treturn new globals.Response(\n\t\t\tnew globals.ReadableStream({\n\t\t\t\tstart(controller) {\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tread();\n\t\t\t\t\t}\n\n\t\t\t\t\tread();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n\nconst validateAndMerge = (...sources) => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nconst createInstance = defaults => {\n\tconst ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\tky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {method}));\n\t}\n\n\tky.HTTPError = HTTPError;\n\tky.TimeoutError = TimeoutError;\n\tky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\tky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\tky.stop = stop;\n\n\treturn ky;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (createInstance());\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ky/index.js\n");

/***/ })

})